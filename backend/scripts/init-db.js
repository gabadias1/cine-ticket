const { PrismaClient } = require('@prisma/client');
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const http = require('http');

const prisma = new PrismaClient();

async function initDatabase() {
  console.log('üîç Verificando banco de dados...');
  
  let isDisconnected = false;
  
  // Verificar se o arquivo do banco existe
  const dbPath = path.join(__dirname, '../prisma/dev.db');
  const dbExists = fs.existsSync(dbPath);
  
  if (!dbExists || fs.statSync(dbPath).size === 0) {
    console.log('üì¶ Criando banco de dados...');
    fs.closeSync(fs.openSync(dbPath, 'w'));
  }
  
  try {
    // Tentar conectar ao banco
    await prisma.$connect();
    
    // Verificar se existem filmes no banco
    const movieCount = await prisma.movie.count();
    
    if (movieCount === 0) {
      console.log('üì¶ Banco de dados vazio. Aplicando migrations e populando com filmes...');
      
      // Rodar migrations
      console.log('  ‚Üí Aplicando migrations...');
      try {
        execSync('npx prisma migrate deploy', { stdio: 'inherit' });
      } catch (error) {
        console.log('  ‚Üí Criando nova migration...');
        execSync('npx prisma migrate dev --name init', { stdio: 'inherit' });
      }
      
      await prisma.$disconnect(); // Desconectar para evitar conflitos
      isDisconnected = true;
      
      // Rodar seed inicial (usu√°rios, cinemas, etc)
      console.log('  ‚Üí Criando dados iniciais (usu√°rios, cinemas)...');
      execSync('npm run seed', { stdio: 'inherit' });
      
      // Sincronizar filmes do TMDB (m√°ximo poss√≠vel)
      console.log('  ‚Üí Sincronizando M√ÅXIMO de filmes da TMDB (aguarde, pode levar alguns minutos)...');
      execSync('node scripts/syncMaximumMovies.js', { stdio: 'inherit' });
      
      console.log('‚úÖ Banco de dados inicializado com sucesso!');
      return; // Sair da fun√ß√£o j√° que finalizou
    } else {
      console.log(`‚úì Banco de dados j√° possui ${movieCount} filmes.`);
      console.log('  ‚Üí Verificando migrations pendentes...');
      try {
        execSync('npx prisma migrate deploy', { stdio: 'inherit' });
      } catch (error) {
        // Ignorar erro se n√£o houver migrations pendentes
        console.log('  ‚Üí Nenhuma migration pendente.');
      }
    }
  } catch (error) {
    console.error('‚ùå Erro ao inicializar banco:', error.message);
    throw error;
  } finally {
    if (prisma && !isDisconnected) {
      await prisma.$disconnect();
    }
  }
}

initDatabase()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error('Erro fatal na inicializa√ß√£o:', error);
    process.exit(1);
  });

